## Project Overview

This is an Astro project with a comprehensive set of development rules and guidelines implemented through `.mdc` (Markdown Configuration) files. The rules system appears to be organized into several key areas:

### 1. Code Style & Quality

```5:18:.cursor/rules/coding-principles.mdc
## Code Style Principles

- Write self-documenting code following senior engineering practices
- Maintain strict TypeScript usage throughout
- Reference `globals.css` for project-wide styling and design tokens
- Utilize Strapi types from `@types/strapi.ts` for backend data structures
- Follow the established commit convention (referenced in README.md, lines 80-89)

  **Code Quality**

  - Follow ESLint and Prettier configurations
  - Use pre-commit hooks for code quality
  - Follow the established commit convention

```

- Enforces strict TypeScript usage
- Follows senior engineering practices
- Uses ESLint and Prettier configurations
- Implements pre-commit hooks

### 2. Project Structure

````7:23:.cursor/rules/project-structure.mdc
```text
src/
├── assets/         # Static assets (images, fonts)
├── components/     # Reusable UI components
│   └── ui/        # Shadcn/ui components - Do not add anything to this unless using cli pnpm dlx shadcn@latest add <components>
├── config/        # Project configuration (site.ts)
├── layouts/       # Page layouts and templates
├── lib/          # Core business logic and API clients, Shadcn utility
├── utils/        # Helper functions for handling specific types and common patterns (seo.ts, image.ts)
├── pages/        # Astro pages and API routes
├── styles/       # Global styles and Tailwind v4 config
├── types/        # TypeScript definitions generated programmatically do not modify manually
└── __tests__/        # Test files and utilities
public/          # astros where it get puts public assets
scripts/               # for development scripts like fetching and generating types from strapi
astro.config.mjs
```
````

The project follows a well-organized structure with dedicated directories for:

- Components (including Shadcn/ui components)
- Pages
- Layouts
- Business logic
- Types
- Testing

### 3. Styling Guidelines

```5:9:.cursor/rules/style-guide.mdc
**Styling**

- Use Tailwind classes with design tokens from [globals.css](mdc:src/styles/globals.css)
- The project references and uses Shadcn components so see variables and styling
- Reference the style guide page for typography examples and component usage demonstrations [style-guide.astro](mdc:src/pages/style-guide.astro)
```

- Uses Tailwind CSS with custom design tokens
- Implements Shadcn/ui component system
- References a centralized style guide

### 4. Astro-Specific Rules

````5:22:.cursor/rules/astro.mdc
Be sure to add fences at the top of astro components for dynamic server logic

```astro
---
// I'm inside the fences
const example = "example string"
---

<p>Templates String</p>
```

- Optimize images using Astro's built-in tools
- Use client directives sparingly
- Use Astro components (.astro) for static content without reactive state
- Use React components (.tsx) only when reactive state or client-side interactivity is required
- Leverage Astro v5 features and optimizations for best performance

Use framework specific components for like images and other optimizations that astro has out of the box check the official documentation regularly.
````

- Guidelines for Astro component creation
- Best practices for static vs. dynamic content
- Optimization recommendations

### 5. Data Fetching

```7:12:.cursor/rules/data-fetching.mdc
### API Integration

- Use the Strapi client from [strapi-client.ts](mdc:src/lib/api/strapi-client.ts)
- Reference type definitions in [strapi.ts](mdc:src/types/strapi.ts)
- Handle loading and error states appropriately
- When using the Strapi SDK, always specify the response type (e.g. `strapi.find<SponsorsSponsorListResponse>('sponsors', {...})`) to ensure proper typing of the response data You can see similar patterns in other components [Sponsors.astro](mdc:src/components/Sponsors.astro)
```

- Standardized approach for Strapi backend integration
- Type-safe data fetching patterns
- Error handling guidelines

### 6. Type Safety

```6:11:.cursor/rules/type-safety.mdc
2. **Type Safety**

   - Leverage generated Strapi types for data structures
   - Run `pnpm generate:types` when Strapi schema changes
   - Use strict typing for component props
   [strapi.ts](mdc:src/types/strapi.ts)
```

- Strict typing requirements
- Integration with Strapi-generated types
- Type generation workflow

### 7. Page Optimizations

```5:9:.cursor/rules/page-optimizations.mdc
**SEO**

Utilize the SEO utility from [seo.ts](mdc:src/utils/seo.ts)

in conjunction with the [Layout.astro](mdc:src/layouts/Layout.astro)
```

- SEO optimization guidelines
- Integration with layout components

The cursor rules system appears to be designed to maintain consistency and best practices across the project, with a strong focus on type safety, code quality, and performance optimization. It's particularly well-suited for a team environment where maintaining consistent standards is crucial.

These rules are enforced through various tools and configurations, including:

- ESLint and Prettier for code formatting
- Husky for pre-commit hooks
- Commitlint for commit message standards
- TypeScript for type safety
- Tailwind and Shadcn for consistent styling

The system provides a comprehensive set of guidelines while maintaining flexibility for different aspects of the application development process.
