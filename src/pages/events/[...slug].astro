---
import Layout from '@/layouts/Layout.astro';
import HeroMarquee from '@/components/HeroMarquee.astro';
import PanelImage from '@/components/PanelImage.astro';
import config from '@/config/site';
import strapi from '@/lib/api/strapi-client';
import { ensureLeadingSlash } from '@/utils/url';
import { formatDate } from '@/utils/date';
import type { EventsEvent, EventsEventListResponse } from '@/types/strapi';

export async function getStaticPaths() {
  // Fetch all events to generate static paths
  const eventsResponse = await strapi.collection('events').find({
    populate: '*',
  });

  if (!eventsResponse.data) {
    return [];
  }

  // Map each event to a path with params
  return eventsResponse.data.map((event: EventsEvent) => ({
    params: {
      slug: event.slug?.replace(/^\//, '') || '',
    },
    props: { event },
  }));
}

// Get the props passed from getStaticPaths
const { event } = Astro.props;

// If accessed directly without going through getStaticPaths
// This shouldn't happen with static generation, but helps with TypeScript
const { slug } = Astro.params;
// If we somehow get here directly (shouldn't happen with static generation)
if (!event && slug) {
  const querySlug = ensureLeadingSlash(slug);

  const response = await strapi.collection('events').find({
    filters: {
      slug: {
        $eq: querySlug,
      },
    },
    populate: {
      meta: {
        populate: '*',
      },
      marqueeImage: {
        populate: '*',
      },
      panelImage: {
        populate: '*',
      },
    },
  });

  if (!response.data || response.data.length === 0) {
    return Astro.redirect('/404');
  }
}
---

<Layout
  title={event.title || 'Event'}
  description={event.meta?.description ||
    event.description ||
    config.description}
>
  <HeroMarquee
    data={{
      title: event.title || 'Event',
      marqueeImage: event.marqueeImage,
    }}
  />

  <div class="container mx-auto px-4 py-12">
    <div class="prose prose-lg mx-auto">
      <div class="mb-6">
        <h2 class="text-2xl font-bold">Event Details</h2>
        <p class="text-lg text-muted-foreground">
          {formatDate(event.startDateTime, 'WITH_TIME')}
        </p>
        {
          event.endDateTime && (
            <p class="text-lg text-muted-foreground">
              Ends: {formatDate(event.endDateTime, 'WITH_TIME')}
            </p>
          )
        }
      </div>

      {event.description && <div set:html={event.description} />}
    </div>
  </div>

  {event.panelImage && <PanelImage panelImage={event.panelImage} />}
</Layout>
