---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '@/layouts/Layout.astro';
import { AspectRatio } from '@/components/ui/aspect-ratio';
import type { BlogComponentDynamicBlogContentComponent } from '@/types/strapi';
import slugify from 'slugify';
import { getStrapiImageUrl } from '@/utils/image';

// Get static paths for all blog posts
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map((entry) => {
    const slug = slugify(entry.data.title, {
      lower: true,
      strict: true,
      trim: true,
    });
    return {
      params: { slug },
      props: {
        title: entry.data.title,
        description: entry.data.description,
        heroImage: entry.data.heroImage,
        author: entry.data.author,
        publishedAt: entry.data.publishedAt,
        bodyContent: entry.data.bodyContent,
      },
    };
  });
}

interface Props {
  title: string;
  description?: string;
  heroImage?: any;
  author: string;
  publishedAt?: string;
  bodyContent?: BlogComponentDynamicBlogContentComponent[];
}

const { title, description, heroImage, author, publishedAt, bodyContent } =
  Astro.props;

// Format the date
const formattedDate = publishedAt
  ? new Date(publishedAt).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  : '';
---

<Layout
  title={title}
  description={description || `Read ${title} by ${author}`}
  image={heroImage?.imageMedia
    ? getStrapiImageUrl(heroImage.imageMedia, 'large')
    : undefined}
>
  <article class="container mx-auto px-4 py-8 max-w-4xl dark:bg-background">
    <header class="mb-8">
      <h1 class="text-4xl font-bold mb-4">{title}</h1>
      <div class="text-muted-foreground">
        <span>By {author}</span>
        <span class="mx-2">â€¢</span>
        <time datetime={publishedAt}>{formattedDate}</time>
      </div>
    </header>

    {
      heroImage?.imageMedia && (
        <div class="mb-8">
          <AspectRatio ratio={16 / 9}>
            <img
              src={heroImage.imageMedia.url}
              alt={heroImage.imageAlt || title}
              class="rounded-lg object-cover w-full h-full"
            />
          </AspectRatio>
        </div>
      )
    }

    <div class="prose prose-lg dark:prose-invert max-w-none">
      {
        bodyContent?.map(
          (content: BlogComponentDynamicBlogContentComponent) => {
            if (content.__component === 'blog-component.dynamic-blog-content') {
              switch (content.layoutType) {
                case 'text':
                  return <div set:html={content.textContent} />;
                case 'image':
                  return (
                    content.imageContent?.imageMedia && (
                      <img
                        src={content.imageContent.imageMedia.url}
                        alt={content.imageContent.imageAlt || ''}
                        class="rounded-lg"
                      />
                    )
                  );
                case 'textRightImageLeft':
                case 'textLeftImageRight':
                  return (
                    <div
                      class={`grid grid-cols-1 md:grid-cols-2 gap-8 items-center ${
                        content.layoutType === 'textRightImageLeft'
                          ? ''
                          : 'md:flex-row-reverse'
                      }`}
                    >
                      {content.imageContent?.imageMedia && (
                        <img
                          src={content.imageContent.imageMedia.url}
                          alt={content.imageContent.imageAlt || ''}
                          class="rounded-lg"
                        />
                      )}
                      <div set:html={content.textContent} />
                    </div>
                  );
                default:
                  return null;
              }
            }
            return null;
          }
        )
      }
    </div>
  </article>
</Layout>
